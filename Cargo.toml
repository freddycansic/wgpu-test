[package]
name = "shooter-game"
version = "0.1.0"
edition = "2021"

[dependencies]
anyhow = "1.0.75"
bytemuck = { version = "1.13.1", features = ["derive"] }
cfg-if = "1.0.0"
cgmath = "0.18.0"
egui = "0.22.0"
egui-wgpu = { version = "0.22.0", features = ["winit"] }
egui_demo_lib = "0.22.0"
egui_wgpu_backend = "0.25.0"
egui_winit_platform = { version = "0.19.0", features = ["webbrowser", "clipboard"] }
env_logger = "0.10.0"
epi = "0.17.0"
instant = "0.1"
log = "0.4.20"
once_cell = "1.18.0"
pollster = "0.3.0"
tobj = { version = "4.0.0", features = ["async", "log"] }
wasm-bindgen-futures = "0.4.37"
wgpu = "0.17.0"
winit = "0.28.6"
winit_input_helper = "0.14.1"

# NOTE: https://sotrh.github.io/learn-wgpu/beginner/tutorial5-textures/#loading-an-image-from-a-file Decoding jpegs in WASM isn't very performant. If you want to speed up image loading in general in WASM you could opt to use the browser's built-in decoders instead of image when building with wasm-bindgen. This will involve creating an <img> tag in Rust to get the image, and then a <canvas> to get the pixel data
[dependencies.image]
version = "0.24"
default-features = false
features = ["png", "jpeg"]

# [build-dependencies]
# anyhow = "1.0"
# fs_extra = "1.2"
# glob = "0.3"
