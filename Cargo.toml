[package]
name = "shooter-game"
version = "0.1.0"
edition = "2021"

[[bin]]
name = "shooter-game-run"
path = "src/main.rs"

# build a static rust lib (rlib) and c++ compatible libary (cdylib)
[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
anyhow = "1.0.75"
bytemuck = { version = "1.13.1", features = ["derive"] }
cfg-if = "1.0.0"
cgmath = "0.18.0"
env_logger = "0.10.0"
lazy_static = "1.4.0"
log = "0.4.20"
pollster = "0.3.0"
wasm-bindgen-futures = "0.4.37"
wgpu = "0.17.0"
winit = "0.28.6"

# NOTE: https://sotrh.github.io/learn-wgpu/beginner/tutorial5-textures/#loading-an-image-from-a-file Decoding jpegs in WASM isn't very performant. If you want to speed up image loading in general in WASM you could opt to use the browser's built-in decoders instead of image when building with wasm-bindgen. This will involve creating an <img> tag in Rust to get the image, and then a <canvas> to get the pixel data
[dependencies.image]
version = "0.24"
default-features = false
features = ["png", "jpeg"]

[target.'cfg(target_arch = "wasm32")'.dependencies]
wgpu = { version = "0.17", features = ["webgl"]}

# send panic errors to js console
console_error_panic_hook = "0.1.7"
console_log = "1.0"

# generate wasm compatible web boilerplate code
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4.37"
web-sys = { version = "0.3", features = [
    "Document",
    "Window",
    "Element",
]}
